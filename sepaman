#!/bin/sh
# Note: Use of "local" keyword is not strictly POSIX-compliant
# See: https://stackoverflow.com/a/18600920/5958455

# Load system-wide settings
DEFAULT_FILE=/etc/default/sepaman
test -r "$DEFAULT_FILE" && . "$DEFAULT_FILE"

# Set default values
: ${SEPA_FROMADDR_PRIORITY:=3} \
  ${SEPA_OIF_PRIORITY:=3} \
  ${SEPA_FWMARK_PRIORITY:=4} \
  ${SEPA_FWMARK_MASK:=0xFFFFFFFF} \
  ${SEPA_FWMARK_CHAIN:=none}

# Set metadata
VERSION="0.1"

# Check for necessary privileges, notably iproute2 privileges
HAS_PRIVILEGES=""
has_privileges() {
  if [ -z "$HAS_PRIVILEGES" ]; then
    ip route replace local 127.0.0.1 dev lo proto kernel scope host table local
    test "$#" -eq 0
    HAS_PRIVILEGES="$?"
  fi
  return "$HAS_PRIVILEGES"
}

run_ifupdown() {
  case "$PHASE" in
    pre-up|post-up|pre-down|post-down);;
    *)
      printf "Internal error: Received invalid phase \"%s\"\n" "$PHASE" >&2
      return 1;;
  esac
  if test -z "$IF_SEPA_TYPE"; then
    # Not a SepaMan-configured interface
    return 0
  fi
  CMD="sm_conf_${IF_SEPA_TYPE}"
  if ! command -v "$CMD" >/dev/null; then
    printf "Unsupported SEPA_TYPE: %s\n" "$IF_SEPA_TYPE" >&2
    return 1
  fi
  "$CMD"
}

cmd_help() {
  echo "Usage: $0 [command]"
  echo "See project homepage for help."
  exit 1
}

cmd_version() {
  echo "SepaMan $VERSION"
}

cmd_install() {
  local BASE=/etc/network
  local F="$BASE/interfaces"
  if [ ! -e "$F" ]; then
    printf "%s not found. Refusing to work without Debian ifupdown.\n" "$F" >&2
    exit 1
  fi
  local D
  for D in if-pre-up.d if-up.d if-down.d if-post-down.d; do
    mkdir -p "$BASE/$D"
    ln -s "$(realpath "$0")" "$BASE/$D/"
  done
}

run_main() {
  if [ $# -eq 0 ]; then
    echo "This tool is intended to be called by ifupdown."
    exit 1
  fi
  case "$1" in
    --help) cmd_help;;
    --version) cmd_version;;
    *)
      CMD="cmd_$1"
      if ! command -v "$CMD" >/dev/null; then
        printf "Unknown command %s\n" "$1" >&2
        return 1
      fi
      shift
      "$CMD" "$@"
  esac
}

sm_ifupdown_common() {
  local TABLE="$IFACE"
  local FROMADDR_PRIO="${IF_SEPA_FROMADDR_PRIO:-$SEPA_FROMADDR_PRIORITY}"
  local OIF_PRIO="${IF_SEPA_OIF_PRIO:-$SEPA_OIF_PRIORITY}"
  local FWMARK="$IF_SEPA_FWMARK"
  local FWMARK_MASK="${IF_SEPA_FWMARK_MASK:-$SEPA_FWMARK_MASK}"
  local FWMARK_PRIO="${IF_SEPA_FWMARK_PRIO:-$SEPA_FWMARK_PRIORITY}"
  local FWMARK_CHAIN="${IF_SEPA_FWMARK_CHAIN:-$SEPA_FWMARK_CHAIN}"
  local FAMILY="-4"

  test "$ADDRFAM" = "inet6" && FAMILY="-6"
  local ROUTE_ACTION RULE_ACTION XFRM_ACTION IPT_ACTION
  case "$PHASE" in
    post-up)
      ROUTE_ACTION=replace
      RULE_ACTION=add
      XFRM_ACTION=add
      IPT_ACTION="-A"
      ;;
    pre-down)
      ROUTE_ACTION=delete
      RULE_ACTION=delete
      XFRM_ACTION=delete
      IPT_ACTION="-D"
      ;;
    *)
      # Not interested in this phase
      return 0
      ;;
  esac

  ip "$FAMILY" route "$ROUTE_ACTION" default dev "$IFACE" table "$TABLE"
  ip "$FAMILY" rule "$RULE_ACTION" from "$IF_ADDRESS" table "$TABLE" pref "$FROMADDR_PRIO"
  ip "$FAMILY" rule "$RULE_ACTION" from all oif "$IFACE" table "$TABLE" pref "$OIF_PRIO"
  if test -n "$FWMARK"; then
    ip "$FAMILY" rule "$RULE_ACTION" from all fwmark "$FWMARK"/"$FWMARK_MASK" table "$TABLE" pref "$FWMARK_PRIO"

    if test -n "$FWMARK_CHAIN" -a "$FWMARK_CHAIN" != none; then
      local IPTABLES="iptables"
      test "$ADDRFAM" = "inet6" && IPTABLES="ip6tables"
      "$IPTABLES" -t mangle "$IPT_ACTION" "$SEPA_FWMARK_CHAIN" -i "$IFACE" -j MARK --set-xmark "$SEPA_FWMARK/$SEPA_FWMARK_MASK"
    fi
  fi

  if test -n "$IF_SEPA_IPSEC_LOCAL" -a -n "$IF_SEPA_IPSEC_REMOTE"; then
    local KEYDIR="$SEPA_IPSEC_KEY_DIR" KEYFILE
    if test -e "$KEYDIR/${IF_SEPA_IPSEC_LOCAL}-${IF_SEPA_IPSEC_REMOTE}"; then
      KEYFILE="$KEYDIR/${IF_SEPA_IPSEC_LOCAL}-${IF_SEPA_IPSEC_REMOTE}"
    elif test -e "$KEYDIR/${IF_SEPA_IPSEC_REMOTE}-${IF_SEPA_IPSEC_LOCAL}"; then
      KEYFILE="$KEYDIR/${IF_SEPA_IPSEC_REMOTE}-${IF_SEPA_IPSEC_LOCAL}"
    elif "$SEPA_IPSEC_KEY_CREATE" = true; then
      printf "Creating key file for %s-%s\n" "$IF_SEPA_IPSEC_LOCAL" "$IF_SEPA_IPSEC_REMOTE" >&2
      KEYFILE="$KEYDIR/${IF_SEPA_IPSEC_LOCAL}-${IF_SEPA_IPSEC_REMOTE}"
      local RAND_FILE=/dev/urandom
      printf "ID=0x%s\n" "$(head -c 4 "$RAND_FILE" | xxd -ps -c 8)" > "$KEYFILE"
      printf "KEY1=0x%s\n" "$(head -c 32 "$RAND_FILE" | xxd -ps -c 64)" >> "$KEYFILE"
      printf "KEY2=0x%s\n" "$(head -c 32 "$RAND_FILE" | xxd -ps -c 64)" >> "$KEYFILE"
    else
      printf "No key file found for %s-%s\n" "$IF_SEPA_IPSEC_LOCAL" "$IF_SEPA_IPSEC_REMOTE" >&2
      return 1
    fi

    if test "$XFRM_ACTION" = add; then (
      . "$KEYFILE"
      local SRC="$IF_SEPA_IPSEC_LOCAL" DST="$IF_SEPA_IPSEC_REMOTE"

      ip xfrm policy add src "$SRC" dst "$DST" dir out tmpl src "$SRC" dst "$DST" proto esp reqid "$ID" mode transport
      ip xfrm policy add src "$DST" dst "$SRC" dir in tmpl src "$DST" dst "$SRC" proto esp reqid "$ID" mode transport
      ip xfrm state add src "$SRC" dst "$DST" proto esp spi "$ID" reqid "$ID" mode transport auth sha256 "$KEY1" enc aes "$KEY2"
      ip xfrm state add src "$DST" dst "$SRC" proto esp spi "$ID" reqid "$ID" mode transport auth sha256 "$KEY1" enc aes "$KEY2"
    ) elif test "$XFRM_ACTION" = delete; then (
      . "$KEYFILE"
      local SRC="$IF_SEPA_IPSEC_LOCAL" DST="$IF_SEPA_IPSEC_REMOTE"

      ip xfrm policy delete src "$SRC" dst "$DST" dir out
      ip xfrm policy delete src "$DST" dst "$SRC" dir in
      ip xfrm state delete src "$SRC" dst "$DST" proto esp spi "$ID"
      ip xfrm state delete src "$DST" dst "$SRC" proto esp spi "$ID"
    ) else
      printf "Internal error: Invalid XFRM action %s.\n" "$XFRM_ACTION" >&2
      return 1
    fi
  fi
  return 0
}

sm_conf_common() {
  case "$PHASE" in
    post-down)
      ip link delete "$IFACE" 2>/dev/null;;
  esac
  sm_ifupdown_common
}

# ifupdown provides us with many environment variables
if test -n "$IFACE" -a -n "$MODE" -a -n "$PHASE"; then
  run_ifupdown
else
  run_main "$@"
fi
